{
  "id": "001",
  "title": "MyBatis 课堂笔记",
  "author": "初晨",
  "content": "# 1、简介\n\n## 1.1、什么是MyBatis\n\n- 这本是Apache的一个开源项目，后迁移到谷歌并改名为MyBatis（原名叫iBatis），2013年前移到GitHub。所以现在应该在GitHub中下载。\n- MyBatis是一个优秀的**持久层**框架。\n- 它支持定制化SQL、存储过程以及高级映射。\n- 它几乎避免了所有的Jdbc的参数配置以及获取结果集的代码。\n- MyBatis可以使用简单的xml配置文件或注解的方式来映射原生类型、接口和Java的POJO（Plain Old Java Object，普通老式Java对象）来操作数据库。\n\n获取MyBatis\n\n- Maven仓库\n\n  ```xml\n  <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->\n  <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>3.5.6</version>\n  </dependency>\n  ```\n\n## 1.2、持久化\n\n1. 数据持久化\n   - 持久化就是将程序的数据在**持久化状态**和**瞬时状态**转换的过程。\n   - 瞬时状态：内存，断电数据就消失。\n   - 持久化状态：数据库，IO文件。其实早期的数据库就是txt文件，后面才慢慢转换过来的（这个过程还是很艰难的）。\n2. 为什么要持久化：\n   - 有一些信息不能丢失。\n   - 内存太贵。\n\n## 1.3、持久层\n\n1. 什么是持久层：\n   - 完成持久化的代码块就叫持久层。\n   - 层是接线十分明显的\n\n## 1.4、什么要学MyBatis\n\n- 学习的原因：\n  - 方便。\n  - 传统的Jdbc代码太复杂，简化Jdbc的操作。自动化完成。\n  - 最核心的是帮助程序将数据存到数据库。\n  - 不用MyBatis也可以，但是学了MyBatis也可以更容易上手数据库的操作。有的都没有学过Jdbc，直接使用MyBatis，但是这样不可能进大公司，不可能做到很牛逼的地位。\n  - 现在使用的很很多。\n- 特点：\n  - 简单易学。\n  - 灵活。\n  - 接触了代码间的耦合。\n  - 提供很多方便操作的标签来映射SQL（主要是在XML文件里面）。\n\n# 2、第一个MyBatis程序\n\n##2.1、搭建环境\n\n1. 搭建父环境\n\n   - 先创建一个数据库\n\n     ```sql\n     CREATE table user(\n         id INT(20) PRIMARY KEY NOT NULL,\n         name VARCHAR(30) NOT NULL,\n         pwd VARCHAR(20) NOT NULL\n     )ENGINE=INNODB DEFAULT CHARSET=utf8;\n     \n     INSERT INTO user(id,name,pwd) VALUES\n     (1,'孔繁帮','123456'),\n     (2,'张三','123453'),\n     (3,'李四','123454')\n     ```\n\n   - 新建项目（这里用Maven项目来学习）这个就不说了\n\n   - 引入相关jar包，不是用原来的那种下载jar包，要用仓库。\n\n2. 创建一个模块（主要要学会**MyBatis官文档**和**看代码笔记**）\n\n   - 编写MyBatis的核心配置文件 \n\n   - 编写MyBatis的工具类（这个以后都是可以直接复制使用的）\n\n     ```java\n     /**\n      * 这个工具类就是为了创建MyBatis官方文档中要求构建的 \"SqlSessionFactory\"\n      * SqlSessionFactory 工厂模式必定是为了生产  SqlSession 产品的（实例）\n      */\n     public class MyBatisUtil {\n     \n         private static SqlSessionFactory sqlSessionFactory;\n     \n         static {\n             try {\n                 //使用MyBatis获取 SqlSessionFactory 对象\n                 String resource = \"mybatis-config.xml\";\n                 InputStream inputStream = Resources.getResourceAsStream(resource);\n                 sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n             } catch (IOException e) {\n                 e.printStackTrace();\n             }\n         }\n     \n         //既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。\n         //SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。\n         public static SqlSession getSqlSession(){\n             return sqlSessionFactory.openSession();\n         }\n     }\n     ```\n\n   - 编写代码\n\n     - 实体类\n\n     - Dao接口\n\n     - 接口实现类\n\n       ```xml\n       <!--namespace=绑定一个对用的Dao/Mapper接口-->\n       <mapper namespace=\"com.chuchen.dao.UserDao\">\n           <!--查询语句-->\n           <select id=\"getUserList\" resultType=\"com.chuchen.pojo.User\">\n               //执行SQL的语句\n               select * from user\n           </select>\n       </mapper>\n       ```\n\n   - 测试\n\n     > org.apache.ibatis.binding.BindingException: Type interface com.chuchen.dao.UserDao is not known to the MapperRegistry.\n\n     - 上面的那个错误是因为每一个mapper.xml 都需要在MyBatis核心配置文件中注册\n\n       ```xml\n       <!--每一个mapper.xml 都需要在MyBatis核心配置文件中注册-->\n           <mappers>\n               <mapper resource=\"com/chuchen/dao/UserMapper.xml\"/>\n           </mappers>\n       ```\n\n     - 还有就是要注意，有 不在 resources 文件夹下面的资源文件为了可以导出，就要在该模块的pom.xml文件中加入如下代码\n\n       ```xml\n       <!--在build中配置resources来防止我们没在resources文件夹下的资源文件导出失败的问题-->\n           <build>\n               <resources>\n                   <resource>\n                       <directory>src/main/resources</directory>\n                       <includes>\n                           <include>**/*.properties</include>\n                           <include>**/*.xml</include>\n                       </includes>\n                       <filtering>true</filtering>\n                   </resource>\n                   <resource>\n                       <directory>src/main/java</directory>\n                       <includes>\n                           <include>**/*.properties</include>\n                           <include>**/*.xml</include>\n                       </includes>\n                       <filtering>true</filtering>\n                   </resource>\n               </resources>\n           </build>\n       ```\n\n     - 测试程序\n\n       ```java\n       \t@Test\n           public void test(){\n               //获取SQLSession的实体类\n               //建议加上try catch\n               SqlSession sqlSession = MyBatisUtil.getSqlSession();\n               //执行SQL语句\n               //方式一：\n               UserDao mapper = sqlSession.getMapper(UserDao.class);\n               List<User> userList = mapper.getUserList();\n               for(User user : userList){\n                   System.out.println(user);\n               }\n               sqlSession.close();\n           }\n       ```\n\n\n\n# 3、CRUD\n\n## 3.1、namespace\n\nnamespace中的包名必须要与接口名一致。\n\n## 3.2、增删改查测试（多些就会了）\n\n选择，查询语句，相当于数据库里面的select。\n\n注意：**增删改必须要提交事务**。\n\n```xml\n<!--namespace=绑定一个对用的Dao/Mapper接口-->\n<mapper namespace=\"com.chuchen.dao.UserMapper\">\n    <!--查询语句-->\n    <select id=\"getUserList\" resultType=\"com.chuchen.pojo.User\" parameterType=\"\">\n        <!--执行SQL的语句-->\n        select * from user;\n    </select>\n</mapper>\n```\n\n- id：就是namespace中对应的方法名。\n- resultType：SQL语句执行的返回值。\n- parameterType：参数类型。\n\n## 3.3、万能的Map\n\n有时候，当我们的实体类或者表的字段太多的话就可以用Map。\n\n## 3.4、模糊查询\n\n当存在模糊查询的时候，一般通配符最好在Java代码中写，若在SQL语句进行拼接的话可能会出现SQL注入，这个到时候后看情况，自己选择。\n\n# 4、配置解析\n\n## 4.1、核心配置文件（可查看官方文档）\n\n==官方文档==    ==官方文档==     ==官方文档==\n\n我们一般的命名为： **mybatis-config.xml**  但是有的资料也不一样，可以配置的属性有（官方文档写的很详细了）：\n\n- [properties（属性）](https://mybatis.org/mybatis-3/zh/configuration.html#properties)\n- [settings（设置）](https://mybatis.org/mybatis-3/zh/configuration.html#settings)\n- [typeAliases（类型别名）](https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases)\n- [typeHandlers（类型处理器）](https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers)\n- [objectFactory（对象工厂）](https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory)\n- [plugins（插件）](https://mybatis.org/mybatis-3/zh/configuration.html#plugins)\n-  [environments（环境配置）](https://mybatis.org/mybatis-3/zh/configuration.html#environments) \n  - environment（环境变量）\n    - transactionManager（事务管理器）\n    - dataSource（数据源）\n- [databaseIdProvider（数据库厂商标识）](https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider)\n- [mappers（映射器）](https://mybatis.org/mybatis-3/zh/configuration.html#mappers)\n\n1. properties：我们可是使用properties来引入外部资源文件。\n2. 类型别名： 类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。 \n3. mappers（映射器）\n4. 生命周期。\n\n# 5、解决数据库字段名和实体类属性名不一致的问题\n\n解决方法：\n\n1. SQL语句中起别名\n\n2. **通过 resultMap 解决**\n\n   ```xml\n   <!--结果集映射-->\n   <resultMap id=\"UserMap\" type=\"User\">\n       <result column=\"id\" property=\"id\"/>\n       <result column=\"name\" property=\"name\"/>\n       <result column=\"pwd\" property=\"password\"/>\n   </resultMap>\n   <!--查询语句-->\n   <select id=\"getUserList\" resultType=\"user\" resultMap=\"UserMap\">\n       <!--执行SQL的语句-->\n       select * from user;\n   </select>\n   ```"
}